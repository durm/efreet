# -*- coding: utf-8 -*-

from flask import Flask, request, render_template

application = Flask(__name__)
application.debug = True


QUESTIONS = [
    ("Мой ежемесячный доход", (
        ("от 0 до 10000 руб", 0),
        ("от 10000 до 20000 руб", 1),
        ("от 20000 до 50000 руб", 2),
        ("от 50000 до 100000 руб", 4),
        ("от 100000 до 200000 руб", 8),
        ("от 200000 до 400000 руб", 12),
        ("от 400000 до 800000 руб", 17),
        ("от 800000 руб", 24),
    )),
    ("Я работаю наемным сотрудником", (
        ("Да", 3),
        ("Нет", 0),
    )),
    ("У меня руководящая должность", (
        ("Да", 4),
        ("Нет", 0),
    )),
    ("Я работаю сам на себя (подработки, фриланс)", (
        ("Да", 4),
        ("Нет", 0),
    )),
    ("У меня есть свой бизнес", (
        ("1-10 человек", 6),
        ("11-50 человек", 8),
        ("51-100 человек", 12),
        ("больше 100 человек", 16),
    )),
    ("У меня есть доходы от инвестиций (вкладов и пр)", (
        ("Да", 2),
        ("Нет", 0),
    )),
    ("Я пользуюсь социальными выплатами (льготы, субсидии, вычеты)", (
        ("Да", 2),
        ("Нет", 0),
    )),
    ("Мои расходы больше доходов", (
        ("Да", -5),
        ("Нет", 0),
    )),
    ("Мои расходы примерно равны доходам", (
        ("Да", 0),
        ("Нет", 0),
    )),
    ("У меня всегда хватает денег на отпуск или крупную покупку", (
        ("Да", 4),
        ("Нет", 0),
    )),
    ("Я откладываю", (
        ("около 5% от своих доходов", 1),
        ("10% от своих доходов", 3),
        ("20% от своих доходов", 7),
        ("30% от своих доходов", 10),
        ("30% от своих доходов", 16),
    )),
    ("Я откладываю деньги в копилку", (
        ("Да", 0),
        ("Нет", 0),
    )),
    ("Сумма моих накоплений", (
        ("менее месячного дохода", 1),
        ("примерно 1-2 месячных доходов", 3),
        ("примерно 3-5 месячных доходов", 6),
        ("Более 6 месячных доходов", 12),
    )),
    ("Я вкладываю накопления в банк под", (
        ("5-8% годовых", 2),
        ("12% годовых", 4),
        ("20-30% годовых", 8),
        ("50% годовых", 16),
        (">= 100% годовых", 25),
    )),
    ("Мой пассивный доход превышает общую сумму расходов", (
        ("Да", 25),
        ("Нет", 0),
    )),
    ("У меня есть недвижимость, которую я сдаю в аренду", (
        ("Да", 6),
        ("Нет", 0),
    )),
    ("У меня есть потребительские кредиты", (
        ("Да", -4),
        ("Нет", 0),
    )),
    ("У меня есть активные кредитные карточки", (
        ("Да", -4),
        ("Нет", 0),
    )),
    ("У меня есть частные займы (под%)", (
        ("Да", -8),
        ("Нет", 0),
    )),
    ("У меня есть займы/долги (без%)", (
        ("Да", -1),
        ("Нет", 0),
    )),
    ("У меня есть ипотечный кредит", (
        ("Да", -4),
        ("Нет", 0),
    )),
    ("Я занимаюсь благотворительностью", (
        ("Да", 2),
        ("Нет", 0),
    )),
    ("Я веду строгий финансовый учет доходов и расходов", (
        ("Да", 4),
        ("Нет", 0),
    )),
    ("У меня есть бюджет на 1 месяц вперед", (
        ("Да", 2),
        ("Нет", 0),
    )),
    ("У меня есть бюджет на 1 год", (
        ("Да", 5),
        ("Нет", 0),
    )),
    ("У меня есть финансовый план на 3-10 лет вперед", (
        ("Да", 8),
        ("Нет", 0),
    )),
    ("У меня есть список финансовых целей, с ценами и сроками", (
        ("Да", 2),
        ("Нет", 0),
    )),
    ("В моих планах и бюджетах учтены инвестиции", (
        ("Да", 5),
        ("Нет", 0),
    )),
    ("Я считаю деньги очень важной темой для своей жизни", (
        ("Да", 5),
        ("Нет", 0),
    )),
    ("Я читаю книги по личным финансам", (
        ("Да", 2),
        ("Нет", 0),
    )),
    ("Я хожу на бесплатные семинары по личным финансам", (
        ("Да", 4),
        ("Нет", 0),
    )),
    ("Я хожу на платные тренинги по личным финансам", (
        ("Да", 15),
        ("Нет", 0),
    )),
    ("Я играл в «Денежный Поток», или «Монополию» или т.п.", (
        ("Да", 3),
        ("Нет", 0),
    )),
]

def get_score(v):
    try:
        return int(v)
    except:
        return 0

@application.route("/")
def page():
    return render_template("form.html", questions=QUESTIONS)
    
@application.route("/calc/", methods=["post"])
def calc():
    s = sum(map(get_score, request.form.values()))
    page = "level1.html"
    if 41 <= s <= 80 :
        page = "level2.html"
    if 81 <= s <= 140 :
        page = "level3.html"
    if 141 <= s <= 200 :
        page = "level4.html"
    return render_template(page, result=s)

if __name__ == "__main__":
    application.run()
